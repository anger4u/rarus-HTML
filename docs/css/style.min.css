/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0;min-height:100vh;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}details,main{display:block}h1{font-size:2em;margin:.67em 0}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;text-decoration:none}abbr[title]{border-bottom:none;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{color:inherit;display:table;max-width:100%;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio],legend{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}[hidden],template{display:none}*{-webkit-box-sizing:border-box;box-sizing:border-box;outline:0}a:hover{color:#f84545}ul{padding:0;margin:0;list-style-type:none}.header-main{background-color:#f5f5c6;border-bottom:1px solid #e3e3e3;padding-top:5px;padding-bottom:5px}.header-main__container{max-width:1220px;width:100%;margin:0 auto;padding-left:20px;padding-right:20px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;min-height:60px;font-family:"Caveat",cursive}.header-main a{font-weight:700;font-family:"Caveat",cursive}.header-main__contacts,.header-main__name{margin:0 30px}.header-main__name a{font-size:34px}.header-main__contacts,.header-main__contacts-list{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.header-main__contacts span{font-size:18px}.header-main__contacts-list{-webkit-box-orient:vertical;-ms-flex-flow:column wrap;flex-flow:column wrap}.header-main__phone a{font-size:28px}.header-main__email{font-size:22px}.header-main__email a{font-size:20px}.header-main__vk{margin:0 15px;width:45px;height:45px}.main{font-family:"Roboto",sans-serif;color:#343434}.main__container{max-width:1220px;width:100%;margin:0 auto;padding-left:20px;padding-right:20px;display:-webkit-box;display:-ms-flexbox;display:flex}.main__description,.main__profile,.main__profile-info ul{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-flow:column wrap;flex-flow:column wrap}.main__profile-img{padding-top:20px}.main__profile-img img{max-width:350px;width:100%}.main__profile-info ul{padding:10px}.main__description-links ul li:not(last-child),.main__profile-info ul li:not(last-child){margin-bottom:10px}.main__description-links ul a,.main__profile-info ul span{font-weight:700}.main__description{margin-left:100px;padding:20px}.main__description-comment,.main__description-links{margin-bottom:30px}.main__description-links ul{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-flow:column wrap;flex-flow:column wrap}.main__description-comment h3{margin:5px 0}.main__description-links{border-bottom:1px solid #333}.footer-main{font-family:"Roboto",sans-serif;color:#e3e3e3;background-color:#4c465e;padding-top:5px;padding-bottom:5px;border-top:1px solid #e3e3e3}.footer-main__container{max-width:1220px;width:100%;margin:0 auto;padding-left:20px;padding-right:20px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;min-height:60px}.footer-main__copyright{font-size:12px}.footer-main__copyright span{display:block;text-align:right}.footer-main__share{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.footer-main__share div{margin-right:15px;text-align:center}@media only screen and (max-width:576px){.header-main__container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-flow:column wrap;flex-flow:column wrap}.header-main__vk{width:35px;height:35px}.footer-main__container,.footer-main__share,.main__container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.main__container{-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.footer-main__container,.footer-main__share{-ms-flex-flow:column wrap;flex-flow:column wrap}.footer-main__container{padding:10px 0}.footer-main__copyright span{text-align:center}.footer-main__share{margin-bottom:20px}}@media only screen and (max-width:768px){.header-main__contacts,.header-main__name{margin:0}.main__description{margin-left:10px;padding:10px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
